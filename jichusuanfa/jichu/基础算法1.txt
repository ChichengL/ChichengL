1.快排
有两种，a以左为基点值，b以中点为基准
a
void Qsort(int l,int r)
{
   if(l>=r)return ;
   int i=l,j=r;
   int x=a[l];
   while(l<r){
   while(a[i]<x)i++;//找到大于x的
   while(a[j]>x)j--;//找到小于x的
   if(i<j)swap(a[i],a[j]);
  }
 Qsort(l,j);
 Qsort(j+1,r);
}
b.
void Qsort(int l,int r)
{
   if(l>=r)return ;
   int i=l-1,j=r+1;
   int x=a[l+r>>1];
   while(l<r){
   do i++while(a[i]<x);//找到大于x的
   do j--while(a[j]>x);  //找到小于x的
   if(i<j)swap(a[i],a[j]);
  }
 Qsort(l,j);
 Qsort(j+1,r);
}
*********************************************
2.并归排序
int s[N],temp[N]//temp是交换数组
void merge_sort(int l,int r)
{
   int mid=l+r>>1;
   merge_sort(l,mid);
   merge_sort(mid+1,r);
   int i=l,j=mid+1,k=0;
   while(i<=mid&&j<=r){
   if(s[i]<=s[j])temp[k++]=s[i++];
   else temp[k++]=s[j++];
}
   while(i<=mid)temp[k++]=s[i++];
   while(j<=r)temp[k++]=s[j++];
   for(int i=l,j=0;i<=r;i++){
   s[i]=temp[j];
   }
}

3.二分              有两个模版
s[N]有序的
int find(int x)
{
     while(l<r){
     int mid=l+r>>1;
     if(s[mid]>=x)r=mid;       找到第一个大于等于x的数；
     else l=mid+1;
  }
   return l;  
}
// while(l<r){
   if(s[mid]<=x)l=mid;      //找到最后一个小于等于x的数;
   else r=mid-1;
}
return l;
