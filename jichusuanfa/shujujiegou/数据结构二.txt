Tire树: 高效存储和查找字符串集合的数据结构

const int N=100010;

int son[N][26],cnt[N],idx;//下标是0的点既是根节点也是空节点
********************************
void insert(char str[]){
  int p=0;
  for(int i=0;str[i];i++){
    int u=str[i]-'a';//如果不同字符串的话u值不同从而达到储存不同字符串的目的
    if(!son[p][u])son[p][u]=++idx;
    p=son[p][u];
  }
  cnt[p]++;
}
int query(char str[])
{
  int p=0;
  for(int i=0;str[i];i++){
    int u=str[i]-'a';
    if(!son[p][u])return 0;
    p=son[p][u];
  }
  return cnt[p];
}
*************************
2.并查集 
完成合并两集合，同时查找两元素在不在集合里

原理：每个集合用一棵 来表示树根编号就是集合编号每个节点存储父节点，p[x]表示x的父节点
1.如何判断树根
2.如何求x的集合编号while(p[x]!=x)x=p[x];
3.如何合并两集合px是x的集合编号，py是y的集合编号p[x]=y; 

合并可以看成路径压缩
