高精度   
 string a,b;
  cin>>a>>b;
  for(int i=a.size()-1;i>=0;i--)A.push_back(a[i]-'0');
  for(int i=b.size()-1;i>=0;i--)B.push_back(b[i]-'0');
  auto C=add(A,B);
  for(int i=C.size()-1;i>=0;i--){
    printf("%d",C[i]);
  }
加 减 乘都是低位开始  除是高位开始

///////////////////////////////
	加法     令一个数t 分别加两个数组的数 大于10就进位
for(int i=0;i<A.size()||i<B.size();i++){
    if(i<A.size())t+=A[i];
    if(i<B.size())t+=B[i];
    C.push_back(t%10);
    t/=10;
  }
  if(t)C.push_back(1);
/////////////////////////////////
	减    
bool cmp(vector<int>&A,vector<int>&B){
  if(A.size()!=B.size())return A.size()>B.size();
  for(int i=A.size()-1;i>=0;i--)
    if(A[i]!=B[i])return A[i]>B[i];
  return true;
}

vector<int>C;
  int k=0;
  for(int i=0;i<A.size();i++){
    k=A[i]-k;
    if(i<B.size())k-=B[i];
    C.push_back((k+10)%10);
    if(k<0)k=1;
    else k=0;
  }
  while(C.size()>1&&C.back()==0)C.pop_back();

if(cmp(A,B)){
    auto C=sub(A,B);
    for(int i=C.size()-1;i>=0;i--)printf("%d",C[i]);
  }else{
    cout<<'-';
    auto C=sub(B,A);
    for(int i=C.size()-1;i>=0;i--)printf("%d",C[i]);
  }

////////////////////////////////
               	乘 
vector<int>mul(vector<int>&A,int b){
  vector<int>C;
  int t=0;
  for(int i=0;i<A.size()||t;i++){
    if(i<A.size())t+=A[i]*b;
    C.push_back(t%10);
    t/=10;
  }
  while(C.size()>1&&C.back()==0)C.pop_back();  去除前导0
  return C;
}
///////////////////////////////////
	除
vector<int>div(vector<int>&A,int b,int &r){
  vector<int>C;
  r=0;
  for(int i=A.size()-1;i>=0;i--){
    r=r*10+A[i];
    C.push_back(r/b);
    r%=b;
  }
  reverse(C.begin(),C.end());
  while(C.size()>1&&C.back()==0)C.pop_back();
  return C;
}
   int main()里面的
  auto C=div(A,b,r);
  for(int i=C.size()-1;i>=0;i--)printf("%d",C[i]);
  cout << endl << r << endl;

*******************************************************
		差分和前缀
	前缀和   a.一维   s[i]=s[i-1]+a[i];		  cout<<s[r]-s[l-1]<<endl;
	             b.二维    s[i][j]=s[i][j-1]+a[i][j]+s[i-1][j]-s[i-1][j-1]; 	
		cout<<s[x2][y2]+s[x1-1][y1-1]-s[x2][y1-1]-s[x1-1][y2]<<endl; 
	差分   a.一维 
		while（n--) 
  		cin>>l>>r>>c;
      		b[l]+=c;
    		b[r+1]-=c;
  	            }
  		for(int i=1;i<=n;i++)a[i]=b[i]+a[i-1];
		b.二维
void insert(int x1,int y1,int x2,int y2,int c)
{
    b[x1][y1]+=c;
    b[x2+1][y1]-=c;
    b[x1][y2+1]-=c;
    b[x2+1][y2+1]+=c;
}

for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            insert(i,j,i,j,a[i][j]);
        }
    }

while(q--)
    {
        int x1,y1,x2,y2,c;
        cin>>x1>>y1>>x2>>y2>>c;
        insert(x1,y1,x2,y2,c);
    }